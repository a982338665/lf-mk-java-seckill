项目简介：
1.Spring boot框架
2.jpa 进行数据库操作--自动生成表结构--无sql
3.yml文件信息配置
4.获取接口信息日志记录（拦截器）AOP--面向切面编程
5.全局异常拦截处理（自定义异常/枚举管理异常类型或返回代码）
6.接口返回格式定义（json格式固定返回）
7.前后台一体（模板形式）/前后台分离restful api
8.单元测试:
    --注意;在配置命令是，mvn要省略不写
    --项目打包时会自动启动测试用例，并告知测试结果，故只需添加 mvn install 命令执行，便可全部进行测试
    --跳过单元测试进行打包命令：
        mvn clean package -Dmaven.test.skip=true
        mvn install -DskipTests
9.service事务管理
10.表单验证
11.Spring boot 热部署实现：
    --使用Spring Loaded:
        --1.maven启动方式：pom.xml添加依赖.或者
        --2.run as - java application ，需要下载jar包启动
    --使用spring-boot-devtools：
        --pox.xml--直接加依赖
        <!--热部署依赖-->
        <dependency>
        			<groupId>org.springframework.boot</groupId>
        			<artifactId>spring-boot-devtools</artifactId>
        			<optional>true</optional>
        </dependency>
 12.spring boot-打包发布方式：
    --1.jar包：pom里改为jar，不使用tomcat；java -jar girl-0.0.1-SNAPSHOT.jar --spring.profiles.active=deve
    --2.war包：pom改为war
 13.自定义注解：
 14.AOP编程思想 详解
---------------------------------
Spring boot介绍：
    1.简化搭建开发过程
    2.实际上类库的集合
    ---------
    特点：
    1.独立的Spring应用程序--自动配置spring--可自动检查配置
    2，嵌入式tomcat，不需要将其部署在tomcat，只需要java -jar启动项目
    ---------
    使用场景：
    1.开发restful风格微服务架构
    2.微服务，自动化，横向扩展
    3.精简配置，整合其他工具
---------------------------------
11.spring boot热部署：
    --优点：节省时间，不用重启服务器，直接上线，如一些游戏的服务器，大企业服务器，适用于本地和线上
    --热部署和热加载的联系与区别：
          --联系：1.不用重启服务器  2.基于java类加载器实现
          --区别：
              --1.热部署：整个应用 --- 一般使用再生产环境上，相对安全
                   --侧重重新部署项目，不关闭服务器，直接替换项目
                   --直接重新加载整个应用：释放内存，浪费时间
              --2.热加载：部分类   --- 一般使用在开发环境上，较线上不安全，在开发调试中可以提高开发效率，即开发者模式
                   --修改java代码后，自动编译class文件，上传服务器，只加载修改后的类
                   --容器启动之后，启动一条后台线程，定时去检测类的时间戳变化，若有变化，则重新加载该类，改变程序运行行为
    --原理：
          --类加载的五个阶段：
            1.加载：找到类的静态存储结构并加载至jvm中，然后转化成方法区的运行时数据结构，生成class对象，加载阶段可以自定义类加载器参与。
            2.验证：确保字节码安全，不会对jvm安全造成威胁，可以通过其启动参数来禁用一些验证，但不建议，防止危害
            3.准备：确定内存布局，初始化类变量。不会执行程序自定义的赋值操作，例如 private static int count=12,这里赋值为12，
                    但实际上此时该count初始值是为0
            4.解析：将符号引用变为直接引用
            5.初始化：调用程序自定义代码 此时count=12；此行为不止一次，前四个运行后执行
                --java jvm中规定5种情况下，即刻初始化：
                    注意：final修饰的类在编译期的时候就会把结果放在常量池中，即使调用也不会在触发初始化
                    1.对类使用反射调用时（java.lang.reflect）,若类没有进行初始化，要先初始化类
                    2.初始化一个类的时候，若发现其父类未初始化，需要先初始化父类
                    3.虚拟机启动时，先初始化主类，例如：写了main方法的类，会被先初始化
                    4.invoke--动态代理支持解析结果符合条件会，先初始化其涉及到的类
          --类加载器的特点：
            1.由AppClass Loader(系统类加载器)开始加载指定类
            2.类加载器将加载任务交给其父类，父类找不到，自己再去加载
            3.Bootstrap Loader（启动类加载器）为顶级类加载器
          --java类的热部署：
            1.可通过类的热加载实现
            2.配置tomcat：三种方式
                --1.直接把web文件放在启动中的tomcat文件下的webapps中，此时就会自动发布此web项目
                --2.在tomcat/config/server.xml 中<host>内部添加context标签：
                    <Context debug=0 docBase="D:/imooc/web" path="/hot" privileged="true" reloadable="true"/>
                    //web为项目名称，hot为虚拟路径 ，访问路径：localhost:8080/hot/...
                --3.在%tomcat_home%/config/Catalina/localhost中添加一个xml（该xml名称随意）--reloadable
                    <Context path="" docBase="G:\idea_work_maven\TSB_ISCHOOL2_EXTERNAL_API\classes
                    \artifacts\TSB_ISCHOOL2_EXTERNAL_API_war_exploded" reloadable="true"/>
                    如果不写path属性，那么服务器会以该xml文件名字作为访问路径
---------------------------------
快捷键设置：
    alt+insert  = 快速生成get，set方法
    ctrl+alt+s  = setting (设置)
    自动导包设置=ctrl+alt+s>Genaral>Auto Import>Ask(复选框全选)
    自动补全快捷=ctrl+alt+v或者alt+enter（enter要两次） 等同于 eclipse中 ctrl + 2 + L
    ctrl+alt+T  =try/catch/
    ctrl+shift+f=代码格式化
    ctrl+o      =提示快速重写的快捷键
    alt+shift+m =提示生成方法
    Alt+Enter   =快速修复(即Eclipse中的Quick Fix功能)---父类方法重写
    psvm+tab    =快速创建mian函数
    ctrl+F9     =重新加载修改过的文件
    ctrl+T      =跳转至方法实现类
    ctrl+H      =全文搜索包含某字段的所有文件
---------------------------------
idea的一些操作：
    --1.修改为utf-8编码：setting--File Encoding--三处+一个对勾
    --2.快速测试方法： * 右键方法名--go to --Test--选中跳转
    --3.配置IDEA的maven自动下载源码的方法：
        点击File -> Setting ->Maven ->Importing：选中Automatically download中的两个多选框Sources和Documentation
---------------------------------
Spring data jpa:--
    --不用写sql
    --定义了一系列对象持久化的标准
    --目前实现此规范的产品有Hibernate，TopLink等
---------------------------------
Restful api接口设计：
    --1.添加两个依赖：-1.jpa
                     --2.mysql
    --2.添加配置yml
    --3.写实体类生成对应表：驼峰命名=**_**
    --注意;自动扫描实体类时，生效与pers.lish.girl包下，pers.lish.jpa包下不生效，原因未知
---------------------------------
事务管理：
    --1.数据库：
---------------------------------
