------------------------------------------------------------------
-----------------------
编程范式：即编程思想
        1.面向过程
        2.面向对象
        3.面向函数
        4.事件驱动
        5.面向切面：和面向对象互补
-----------------------
AOP初衷：
        1.解决代码重复
        2.解决关注点分离：
            1.水平分离：展示层-服务层-持久层
            2.垂直分离：从业务模块划分：订单/库存
            3.切面分离：分离功能性需求和非功能性需求
-----------------------
AOP好处：
        1.集中管理某一关注点/横切逻辑
        2.可以方便添加/删除关注点
        3.侵入性少，提高代码可读性和可维护性
-----------------------
应用场景：切面分离
        1.权限控制
        2.缓存控制
        3.事务控制
        4.审计日志
        5.性能监控
        6.分布式追踪
        7.异常处理
-----------------------
支持AOP的编程语言：java/.net/c/c++/Ruby/Python/PHP 等
-----------------------
poincut expression：（横切表达式）
        1.designators：
            --1.execution()--具体到文件
            --2.注解
            --3.参数等等
            --4.
        2.wildcards：（通配符）*/../+
            --1.* 匹配任意数量的字符
            --2.+ 匹配指定类及子类
            --3...匹配某包下所有子包所有类的方法
        3.operators:(条件)&&/||/!
-------------------------------------------------
/*********************以注解形式定义与方法级别上**************************************************************/
    /**
     * 所有带有注解@AdmainOnly的方法都要经过此拦截器---此注解写全类名
     * --匹配该类下的所有方法
     *      @Pointcut("@within(pers.lish.girl.aspect.Aspect_Content)")
     * --匹配pers.lish.girl包及其子包下的所有类的方法
     *      @Pointcut("@within(pers.lish.girl..)")
     * *************************** 对象匹配**********************************************************
     * --匹配当前传入的代理对象的方法=====接口
     *      @Pointcut("this(pers.lish.girl.aspect.Aspect_Content)")
     * --匹配实现该接口的目标对象的方法（例如：DemoDao implement IDao），即DemoDao的方法===该接口的所有实现类
     *      @Pointcut("target(pers.lish.girl.IDao)")
     * --匹配所有以service结尾的bean中的方法
     *      @Pointcut("bean(pers.lish.girl.IDao)")
     * *************************** 参数匹配：*********************************************************
     * --匹配girl包下，所有类的成员变量为long类型的所有方法
     *      @Pointcut("args(Long)&&within(pers.lish.girl.*)")
     *      @Pointcut("args(Long,..)&&within(pers.lish.girl.*)")
     * *************************** 注解匹配  *********************************************************
     *--1.方法级别注解：
     * @Pointcut("@annotation(pers.lish.girl.security.AdmainOnly)")
     * --2.类级别注解：被注解withinAnnotation标记的类的方法被匹配
     * @Pointcut("@within(pers.lish.girl.security.withinAnnotation) && within(pers.lish.girl..*)")
     * --3.target注解：在Spring环境下与@within注解一致
     * --4.参数注解：被注解withinAnnotation标记的类，作为其它类方法的参数，此中方法被匹配
     * @Pointcut("@within(pers.lish.girl.security.withinAnnotation) && within(pers.lish.girl..*)")
     *  *************************** execution()表达式  ************************************************
     *    //方法修饰符+任意返回值（*）+包名及子包+类+任意方法（*）+（..）（任意参数:无参则为(),第一个参数为Long的(Long)）+只拦截抛出异常的方法
    //    @Pointcut("execution(public * com.imooc.service..*Service.*(..)) throws Exception")
    //    @Pointcut("execution(public String com.imooc.service..*Service.*(..))")
    //    @Pointcut("execution(public void com.imooc.service..*Service.*(..))")
     * *************************** advice注解******* **************************************************
     *   @Before("admainOnly()")------方法执行之前织入
         @After()---------------------方法执行之后织入
         @Around()--------------------包含所有注解(万能注解)
         @AfterThrowing---------------方法抛出异常时执行
         @AfterReturning(returning = "o",pointcut = "log()")-----方法有返回值时执行，并且可以获取返回值
         public void  returning(Object o){log.info("response={}",o.toString());}
         ***********************************
         around完整范例：
         // @Pointcut("execution(public * pers.lish.girl.controller.GirlController.*(..))")
         //    public void log(){
         //    }
         //    @Around("log()")
         //    public Object  around(ProceedingJoinPoint proceedingJoinPoint){
         //        log.error("before={}",proceedingJoinPoint.getSignature().getName());
         //        Object result=null;
         //        try {
         //            result=proceedingJoinPoint.proceed(proceedingJoinPoint.getArgs());
         //            log.error("afterReturning={}",result);
         //        } catch (Throwable throwable) {
         //            log.error("afterException={}",throwable);
         //            throwable.printStackTrace();
         //        }finally {
         //            log.error("afterresponse={}","-----------");
         //        }
         //        return  result;
         //    }
/*********************************************************************************************************/
AOP实现原理：
  --1.概述：
    --1.织入的时机：
        --1.编译器织入  （AspectJ）
        --2.类加载时织入（AspectJ 5+）
        --3.运行时      （Spring AOP）--通过代理对象实现运行时织入
            --代理模式：客户端---代理对象---目标对象，所以代理对象可以在代理后做些相应的操作
                --1.静态代理：
                    缺点：代理的方法越多，重复逻辑越多。
                        假设目标类有100个方法，那么就需要代理100次，但是前后执行的逻辑大多重复，代码就会繁琐，故产生动态代理
                --2.动态代理：
                    --基于接口代理：JDK实现
                        --java.lang.reflect.Proxy--动态生成代理类
                        --InvocationHandler--------实现接口
                        --JDK代理仅基于接口进行动态代理
                    --基于继承代理：Cglib实现
  --2.设计模式：
    --1.代理模式
    --2.责任链模式
  --3.实现：
    --1.JDK实现
    --2.Cglib实现
------------------------JDK代理源码解析————————————————————
--1. Subject subject= (Subject) Proxy.newProxyInstance..
     接口对象代理：Proxy.newProxyInstance
     public static Object newProxyInstance(ClassLoader loader,Class<?>[] interfaces,InvocationHandler h)
--2.查找并生成代理类：
    Class<?> cl = getProxyClass0(loader, interfaces);
--3.查询缓存是否有：
    没有则创建该代理类，并放入缓存
--4.生成代理类：
    public final $Proxy0 extends Proxy implements Subject{
        有参构造(InvocationHandler h);
        super.h.invoke();
    }
------------------------JDK代理和Cglib代理对比————————————————————
1.JDK只能针对有接口的类的接口方法进行代理
2.Cglib基于继承来实现代理，无法对static，final类进行代理（代理对象，static修饰的不是对象，静态的东西是脱离对象而存在的）
3.Cglib基于继承来实现代理，无法对static，private方法进行代理
------------------------Spring如何创建代理bean————————————————————
最后创建代理对象的为类为：DefaultAopProxyFactory
@SuppressWarnings("serial")
public class DefaultAopProxyFactory implements AopProxyFactory, Serializable {
    @Override
    public AopProxy createAopProxy(AdvisedSupport config) throws AopConfigException {
       //满足这三种情况的其中一种则cglib代理
        if (config.isOptimize() || config.isProxyTargetClass() || hasNoUserSuppliedProxyInterfaces(config)) {
            Class<?> targetClass = config.getTargetClass();
            //若对象实现了接口，且强制使用cglib代理，则使用cglib代理
            if (targetClass == null) {
                throw new AopConfigException("TargetSource cannot determine target class: " +
                        "Either an interface or a target is required for proxy creation.");
            }
            //如果目标类是接口，则使用jdk代理方式
            if (targetClass.isInterface() || Proxy.isProxyClass(targetClass)) {
                return new JdkDynamicAopProxy(config);
            }
            return new ObjenesisCglibAopProxy(config);
        }
        else {//三个参数都不满足时，使用jdk代理方式
            return new JdkDynamicAopProxy(config);
        }
    }
根据以上代码可知：
    1.若代理对象实现了接口，则默认使用JDK代理
    2.若没有实现接口，则使用cglib代理
    3.若对象实现了接口，且强制使用cglib代理，则使用cglib代理
 --------------
 强制使用cglib代理：
 @SpringBootApplication
 @EnableAspectJAutoProxy(proxyTargetClass = true)
 public class GirlApplication {
 	public static void main(String[] args) {
 		SpringApplication.run(GirlApplication.class, args);
 	}
 }
---------------------------多个AOP作用的时候如何叠加：链式调用（责任链模式）--------------------------------------------
  访问权限   类   包  子类  其他包
    public     ∨   ∨   ∨     ∨
    protect    ∨   ∨   ∨     ×
    default    ∨   ∨   ×     ×
    private    ∨   ×   ×     ×
    ----------------
    拦截器，事务，安全校验--均使用Aop